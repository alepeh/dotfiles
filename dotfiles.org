* Installation
** Create symlinks to all scripts in your home directory
=make=
** source ~/.bash_profile
Ensure that the generated .bash_profile is loaded in your shell
even when you're not using bash.
On some machines I use zsh, so I simply add it to ~/.zshrc

* Sourcing generated files

#+BEGIN_SRC sh :tangle .bash_profile
#!/bin/bash
for file in ~/.{dockerfunc,extra}; do
	if [[ -r "$file" ]] && [[ -f "$file" ]]; then
		source "$file"
	fi
done
unset file
#+END_SRC

* Makefile

#+BEGIN_SRC sh :tangle Makefile
.PHONY: all
all:
	for file in $(shell find $(CURDIR) -name ".*" -not -name ".gitignore"  -not -name ".git" -not -name ".*.swp"); do \
		f=$$(basename $$file); \
		ln -sfn $$file $(HOME)/$$f; \
	done;
#+END_SRC

* Dockerfunc
Run-commands for all docker containers.

** Set variables
#+BEGIN_SRC sh :tangle .dockerfunc
  export DOCKER_REPO_PREFIX=alepeh
#+END_SRC
** Set alias to run spacemacs
This container needs to deal with X11, so it's more difficult to set it up.
On macOS, you need to have XQuartz 2.7.10 installed (the newer version does not work with docker).
The command passes the current directory, spacemacs starts in deft mode and lists all contained files
(if the file-ending matches the filter). 
#+BEGIN_SRC sh :tangle .dockerfunc
  alias s='~/.spacemacs $PWD'
#+END_SRC
** jq
json parser [[https://stedolan.github.io/jq/][jq]]

Usage:
#+BEGIN_EXAMPLE
cat <file> | jq <filter>
#+END_EXAMPLE

#+BEGIN_SRC sh :tangle .dockerfunc
jq() {
	docker run -i --rm \
		--name jq \
		${DOCKER_REPO_PREFIX}/jq "$@"
}
#+END_SRC

** todotxt
Required environment vars in your .extra file:
TODOTXT_TODO_DIR

#+BEGIN_SRC sh :tangle .dockerfunc
t() {
		docker run -it --rm \
			--name todotxt -v ${TODOTXT_TODO_DIR}:/home/user/workspace/ \
			${DOCKER_REPO_PREFIX}/todotxt "$@"
}
#+END_SRC

sort the todotxt file
#+BEGIN_SRC sh :tangle .dockerfunc 
ts() {
    sort ${TODOTXT_TODO_DIR}/todo/todo.txt -o ${TODOTXT_TODO_DIR}/todo/todo.txt
}
#+END_SRC
** yq 
yml parser, wraps [[https://stedolan.github.io/jq/][jq]], so you can apply all of jq's filters.

Usage:
#+BEGIN_EXAMPLE
cat <file> | yq <filter>
#+END_EXAMPLE

#+BEGIN_SRC sh :tangle .dockerfunc
yq() {
	docker run -i --rm \
		--name yq \
		${DOCKER_REPO_PREFIX}/yq "$@"
}
#+END_SRC
