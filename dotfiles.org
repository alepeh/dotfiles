* Installation
** Create symlinks to all scripts in your home directory
=make=
** source ~/.bash_profile
Ensure that the generated .bash_profile is loaded in your shell
even when you're not using bash.
On some machines I use zsh, so I simply add it to ~/.zshrc

** Taskwarrior setup
On macos you can install Taskwarrior via =brew install task=
We need to set the data location. This command persists it in =.taskrc=
#+begin_src sh 
task config data.location ~/nas/drive/task
#+end_src
* Sourcing generated files

#+BEGIN_SRC sh :tangle .bash_profile
#!/bin/bash
for file in ~/.{dockerfunc,aliases,extra}; do
	if [[ -r "$file" ]] && [[ -f "$file" ]]; then
		source "$file"
	fi
done
unset file
#+END_SRC

* Makefile

#+BEGIN_SRC sh :tangle Makefile
.PHONY: all
all:
	for file in $(shell find $(CURDIR) -name ".*" -not -name ".gitignore"  -not -name ".git" -not -name ".*.swp"); do \
		f=$$(basename $$file); \
		ln -sfn $$file $(HOME)/$$f; \
	done;

#+END_SRC

* Dockerfunc
Run-commands for all docker containers.
** Cleanup functions
Remove exited containers.
Need to expand this to also remove volumes and dangling images.
#+begin_src sh :tangle .dockerfunc
dcleanup(){
  docker ps -a --filter status=exited --format {{.ID}} | xargs docker rm
}
#+end_src
** Set variables
#+BEGIN_SRC sh :tangle .dockerfunc
  export DOCKER_REPO_PREFIX=alepeh
#+END_SRC
** jq
json parser [[https://stedolan.github.io/jq/][jq]]

Usage:
#+BEGIN_EXAMPLE
cat <file> | jq <filter>
#+END_EXAMPLE

#+BEGIN_SRC sh :tangle .dockerfunc
jq() {
	docker run -i --rm \
		--name jq \
		${DOCKER_REPO_PREFIX}/jq "$@"
}
#+END_SRC

** jrnl
Required environment vars in your .extra file:
JRNL_JOURNAL_DIR

#+BEGIN_SRC sh :tangle .dockerfunc
jrnl(){
    docker run -it --rm \
      --name jrnl -v ${JRNL_JOURNAL_DIR}:/home/user/workspace \
    ${DOCKER_REPO_PREFIX}/jrnl "$@"
}
#+END_SRC
** openapi generator
https://openapi-generator.tech/docs/installation
Go to the directory wehere you openapi yaml file is located
and run =oagen <openapispecfile>.yaml=

#+BEGIN_SRC sh :tangle .dockerfunc
oagen(){
	docker run --rm \
  		-v ${PWD}:/local openapitools/openapi-generator-cli generate \
  		-i "local/$@" \
  		-g java \
  		-o /local/out/
}
#+END_SRC
** todotxt
Required environment vars in your .extra file:
TODOTXT_TODO_DIR

#+BEGIN_SRC sh :tangle .dockerfunc
t() {
		docker run -it --rm \
			--name todotxt -v ${TODOTXT_TODO_DIR}:/home/user/workspace/ \
			${DOCKER_REPO_PREFIX}/todotxt "$@"
}
#+END_SRC

sort the todotxt file
#+BEGIN_SRC sh :tangle .dockerfunc 
ts() {
    sort ${TODOTXT_TODO_DIR}/todo/todo.txt -o ${TODOTXT_TODO_DIR}/todo/todo.txt
}
#+END_SRC
** task
Required environment vars in your .extra file:
TASK_DATA_DIR

#+BEGIN_SRC sh :tangle .dockerfunc
task() {
		docker run -i --rm \
			--name task -v ${TASK_DATA_DIR}:/home/user/.task/ \
			${DOCKER_REPO_PREFIX}/task "$@"
}
#+END_SRC

** youtube-dl
youtube downloader written in python
https://www.shellhacks.com/download-youtube-video-linux-command-line/

Required environment vars in your .extra file:
YOUTUBE_DL_DOWNLOAD_DIR

#+begin_src sh :tangle .dockerfunc
youtube-dl() {
		docker run -it --rm \
			--name youtubedl -v ${YOUTUBE_DL_DOWNLOAD_DIR}:/home/app/ \
			${DOCKER_REPO_PREFIX}/youtube-dl "$@"
}
#+end_src

** yq 
yml parser, wraps [[https://stedolan.github.io/jq/][jq]], so you can apply all of jq's filters.

Usage:
#+BEGIN_EXAMPLE
cat <file> | yq <filter>
#+END_EXAMPLE

#+BEGIN_SRC sh :tangle .dockerfunc
yq() {
	docker run -i --rm \
		--name yq \
		${DOCKER_REPO_PREFIX}/yq "$@"
}
#+END_SRC
* Aliases
** calendar
Display a calendar of the current plus the next two months using the built-in =cal= utility.

#+BEGIN_SRC sh :tangle .aliases
alias c='cal -A 2'
#+END_SRC

** spacemacs
Set the location to the org directory and launch spacemacs from there, the loacation has to be the same
on all devices.
#+begin_src sh :tangle .aliases 
export ORG_DIR='~/nas/drive/org'
alias org='cd $ORG_DIR'
alias sorg='~/.spacemacs $ORG_DIR'
#+end_src

This container needs to deal with X11, so it's more difficult to set it up.
On macOS, you need to have XQuartz 2.7.10 installed (the newer version does not work with docker).
The command passes the current directory, spacemacs starts in deft mode and lists all contained files
(if the file-ending matches the filter). 
#+BEGIN_SRC sh :tangle .aliases
alias s='~/.spacemacs $PWD'
#+END_SRC

The following mounts the =.spacemacs.el= and the =ap-org= layer configuration from the file system to the container.
This is handy during development. If you change the configs outside the container, you need to restart the container
to pickup the changes.
Make sure that the =DOCKERFILES_DIR= environment variable is set and points to the absolute path of your dockerfile
directory.
#+BEGIN_SRC sh :tangle .aliases
alias smc='~/.spacemacs_mc $PWD'
#+END_SRC

Org-mode needs practice, so the following copies my version of an org tutorial and launches spacemacs.
#+begin_src sh :tangle .aliases
alias orgtutor='mkdir -p /tmp/orgtutor && cp .orgtutor.org /tmp/orgtutor/tutor.org && ~/.spacemacs /tmp/orgtutor/'
#+end_src
** todotxt
todotxt cli is assumed to be availabe via a function =t=
#+BEGIN_SRC sh :tangle .aliases
#list open tasks for the different contexts
alias tp='t ls @psc'
alias th='t ls @home'
alias tr='t ls @rfk'
#+END_SRC
** taskwarrior
This adds a note to a Taskwarrior task using its uuid as filename
and the description as title.
#+begin_src sh :tangle .aliases
alias note='~/.task_open_note'
#+end_src
